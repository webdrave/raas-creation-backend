generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Float
  discount    Float          @default(0)
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  variants    Variant[]
  assets      ProductAsset[]
  reviews     Review[]
  tags        ProductTag[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      ProductStatus  @default(DRAFT)
  Wishlist    Wishlist[]
  material    String?
  Sales SalesSummary[]
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  INACTIVE
}

model ProductAsset {
  id        String    @id @default(uuid())
  asset_url String
  type      AssetType
   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) 
  productId String
}

enum AssetType {
  IMAGE
  VIDEO
  DOCUMENT
}

model Category {
  id        String    @id @default(cuid())
  name      String
  description String?
  parent    Category? @relation("CategoryToParent", fields: [parentId], references: [id])
  parentId  String?
  products  Product[]

  createdAt DateTime  @default(now())

  Category Category[] @relation("CategoryToParent")
}

model Variant {
  id         String      @id @default(cuid())
  size       Size
  images     String[]
  stock      Int
  product    Product     @relation(fields: [productId], references: [id])
  productId  String
  cartItems  CartItem[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum Size {
  S
  M
  L
  XL
  XXL 
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  phone     String     @unique
  password  String
  addresses Address[]
  cart      CartItem[]
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  houseNo   String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String
  payment     Payment?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Float
  paymentMethod String
  transactionId String
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, variantId])
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  products  ProductTag[]
  createdAt DateTime     @default(now())
}

model ProductTag {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([productId, tagId])
}

model SalesSummary {
  id        String   @id @default(cuid())
  date           DateTime @unique
  totalRevenue   Float
  salesGrowth    Float
  totalOrders    Int
  newCustomers   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId      String
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
